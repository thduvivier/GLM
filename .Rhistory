plot(bill, tip)
abline(mean(tip), 0, lty=1, col=1)
abline(lm(tip~bill), lty=3, col=9)
legend(10,8,c("regression line", "average tip"), lty(c))
legend(10,8,c("regression line", "average tip"), lty=c(1,3)))
legend(10,8,c("regression line", "average tip"), lty=c(1,3)))
legend(10,8,c("regression line", "average tip"), lty=c(1,3))
legend(10,8,c("regression line", "average tip"), lty=c(1,3), col=c(1,9))
company1 <- runif(52, min=0, max=40)
company2 <- runif(52, min=0, max=40)
company3 <- runif(52, min=0, max=40)
company4 <- runif(52, min=0, max=40)
company5 <- runif(52, min=0, max=40)
company1 <- data.frame("interactions" = runif(52, min=0, max=40), "week" = 1:52)
head(company1)
interaction1 <- company1$interactions
weeks <- company1$week
plot(weeks, interaction1)
hist(weeks, interaction1)
hist(interaction1)
hist(interaction1, xlab="weeks")
hist(main="Interactions over time of company X", interaction1, xlab="weeks")
hist(main="Interactions over time of company X", interaction1, xlab="weeks", col="yellow")
hist(main="Interactions over time of company X", interaction1, xlab="weeks", col="pink")
install.packages("reshape")
library(reshape)
tips
head(tips)
names(tips)
bill <- tips$total_bill
tip <- tips$tip
plot(bill, tip)
abline(mean(tip), 0, lty=1, col=1)
abline(lm(tip~bill), lty=3, col=9)
abline(lm(tip~bill), lty=2, col=9)
abline(lm(tip~bill), lty=7, col=9)
legend(10,8,c("regression line", "average tip"), lty=c(1,3), col=c(1,9))
boxplot(tip~day$tips, col=2, data=tips)
boxplot(tip~tips$day, col=2, data=tips)
text(rep(1.3,5), f , labels=c('min','Q1','median','Q3','max'), cex=.8)
pythagoras <- function(a, b)
{
c <- sqrt(a^2+b^2)
c
}
pythagoras(1,1)
m <- 20 #number of sequences we want to see
highest.prob <- tail(sequences, m)
highest.prob
plot(cars)
load("C:/Users/duviv/Documents/University/KUL/S1/G0S76A - Analysis of variance/Project/.RData")
install.package("car")
install.package("cars")
install.package("Car")
install.packages("Car")
install.packages("car")
?stripchart
library()
library(UsingR)
help(package = UsingR)
x <- c(2,4,7,10)
x
y <- c(1,10,11,18)
y
plot(x,y)
getwd()
library()
library(robustbase)
library(robustreg)
install.packages("robustreg")
help(package = robustreg)
package()
packages()
?order
x = c(1,2,3,4,5)
order(x)
?diff
x = c(1,2,3,4,5, 7, 7)
unique(x)
y <- seq(0, 365, 0.5)
y
y <- seq(0, 365, 1)
y
?rnorm
x <- rnorm(100)
y <- x<0
sum(y)
y
x
mean(x)
sd(x)
y <- rnorm(100)
y[y>0]
Y[_3]
Y[-3]
y[-3]
y[-0]
y[5]
y[-3]
y[-5]
y[c(1:10)]
namesy(1:5)
names(y) <- 1:5
y
x <- rbind(1:4, 1:4)
x
dim(x)
dimnames(x) <- c("row", "columns")
dimnames(x) <- ("row", "columns")
dimnames(x) <- ("row" "columns")
?dimnames
dimnames(x) <- list('rows', 'columns')
x
names(x) <- 1:4
x
str(x)
z <- paste("row", 1:100)
z
write.table(z, "superdata.txt")
x <- rbind(rnorm(30), nrow=10, ncol=3)
x
x <- rbind(c(1:10)
x <- matrix(1:30, nrow=10, ncol=3)
x
eigen(x)
t(x)
var(x)
library(datasets)
?airquality
df <- airquality
df
read(df)
View(df)
df2 <- subset(df, ozonemonthly < 30, select = c(Temp, Ozone))
df2
df2 <- subset(df, Ozone < 30, select = c(Temp, Ozone))
df2 <- subset(df, Ozone < 30, select = c(Ozone, Temp))
df2 <- subset(df, Temp > 80, select = c(Ozone, Temp))
View(df2)
df2 <- subset(df, Ozone < 30, select = c(Ozone, Temp))
library(doBy)
df
df.ordered <- orderBy(Temp, data = df)
df.ordered <- orderBy(~Temp, data = df)
View(df.ordered)
df.ordered <- orderBy(~ -Temp, data = df)
df.ordered <- orderBy(~ -Temp, Ozone, data = df)
df.ordered <- orderBy(~ -Temp + Ozone Ozone, data = df)
df.ordered <- orderBy(~ -Temp + Ozone, data = df)
df.ordered <- orderBy(~ -Temp - Ozone, data = df)
x <- c(1:1°)
x <- c(1:10)
x
length(x)
x <- seq(0, 500, 5)
x
x <- rep(1:50, 3)
x
sort(x)
x <- rnorm(100)
mat1 <- matrix(x, nrow=10)
mat1
mat2 <- rbind( c(1:10), mat1)
library(reshape)
?tips
df <- tips
View(df)
names(tips)
str(tips)
?str
df1 <- tips[1:20, c(2,3,5)]
View(df1)
df2 <- subset(tips, sex == "Male" && tip > 3)
View(df2)
View(df)
df2 <- subset(tips, sex == "Male" && tip > 3)
View(df2)
df2 <- subset(tips, sex == "Male" & tip > 3, select = c(tip,sex))
df.ordered <- orderBy(~ day - tip, data = tips)
View(df.ordered)
boxplot(tip ~ se)
boxplot(tip ~ sex)
boxplot(tips$tip ~ tips$sex)
abs(-5)
log(1°)
log(10)
x <- &:20
x <- 1:20
var(x)
sd(10)
sd(x)
sd(x)^2
descr <- function(x)
{ list(min =min(x),
median=median(x),
max=max(x),
mean=mean(x),
sd=sd(x),
length=length(x))
}
x <- 25:80
descr(x)
fun1 <- function(x){
ifelse(x > 0, "Non-negative number", "Negative number")
}
x <- 9
fun1(x)
fun1 <- function(y){
ifelse(y > 0, "Non-negative number", "Negative number")
}
x <- 9
fun1(x)
pythagoras <- function(a, b) {
c <- sqrt(a^2 + b^2)
c
}
pythagoras(1,1)
pythagoras(a=1,b=1)
pythagoras(a=4,b=3)
equat <- function(a,b,c,n)
{ delta <- b^2 - 4*a*c
x1 <- (-b+ sqrt(delta))/(2*a)
x2 <- (-b - sqrt(delta))/(2*a)
print(x1)
print(x2)
x <- seq(round(-b/(2*a)) -n, round(-b/(2*a)) +n, 0.01)
y <- a*x^2 + b*x + c
plot(x,y,type="l", axes=FALSE)
axis(1, pos=c(0,0))
axis(2, pos=c(0,0))
}
equat(-8,6,4,2)
equat(-8,6,4,10)
library(usingR)
library(UsingR)
?galileo
df <- galileo
View(df)
plot(init ~ hd)
plot(df$init ~ df$hd)
plot(df$init ~ df$h.d)
title(main=’init versus h’, sub=’Galileo data’)
title( main = ’init versus h’, sub=’Galileo data’)
plot(df$init ~ df$h.d)
title( main = ’init versus h’, sub=’Galileo data’)
?title
title(main = ’init versus h’, sub=’Galileo data’)
title(main = "init versus h", sub="Galileo data")
plot(df$init ~ df$h.d, xlab = "HD mdr")
plot(df$init ~ df$h.d, xlab = "HD mdr", ylab("init lol"))
title(main = "init versus h", sub="Galileo data")
df <- tips
plot(tip ~ bill)
plot(tips$tip ~ tips$bill)
plot(tips$tip ~ tips$total_bill)
abline(lm(tips$tip ~ tips$total_bill), col='red')
abline(h = mean(tips$tip), col = "green")
boxplot(tips$tip ~ tips$day)
library(ggplot2)
pl1 <-ggplot(tips, aes(total_bill, tip))
pl2 <-pl1+ geom_point()+ facet_wrap(~sex)
pl2
pl3 <- pl2 + geom_smooth(formula= y~x, method="lm", colour="blue")
pl3
library(nycflights13)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
head(flights)
df <- flights
?dplyr
oct <- filter(flights, month == 10, day == 1)
View(oct)
flights_sml <- select(flights,
ends_with("delay"),
distance,
air_time)
View(flights_sml)
names(flights_sml)
new1 <- mutate(flights_sml, extra = arr_delay - dep_delay, hours= air_time/60)
head(new1)
by_day <- group_by(flights, year, month, day)
View(by_day)
summarise(by_day, Avgdelay = mean(dep_delay, na.rm = TRUE))
library(readxl)
chronicgdayconsumers <- read_excel("~/Datathon Leuven 19/Data/chronicgdayconsumers.xlsx",
sheet = "L1_Consumers_only_g_day")
View(chronicgdayconsumers)
df <- chronicgdayconsumers
names <- c(df[2,])
names[4] <- "FoodexL1"
names(df) <- names
sort(df$Survey)
unique(df$FoodexL1)
df <- df[-1,]
df <- df[-1,]
View(df)
unique(df$FoodexL1)
df1 <- df[,c(1,3,4,8)]
View(df1)
corr(df$Mean, df$`Nr Consumers`)
names[7] <- 'NrConsumers'
names(df) <- names
corr(df$NrConsumers, df$Mean)
cor(df$NrConsumers, df$Mean)
df <- transpose(foodwide)
df <- t(foodwide)
library(readr)
foodwide <- read_delim("~/Datathon Leuven 19/foodwide.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(foodwide)
df <- t(foodwide)
df.pca <- prcomp(df)
View(df)
df <- df[,-2]
df <- t(foodwide)
df <- df[-2,]
df.pca <- prcomp(df)
df <- foodwide
df <- t(foodwide)
df <- foodwide
df.pca <- prcomp(df)
View(df)
df.pca <- prcomp(df[,3:16])
df.pca <- prcomp(df[,3:14])
print(df.pca)
plot(df.pca, type = "l")
summary(df.pca)
library(devtools)
install.packages("ggbiplot", "vqv")
g <- ggbiplot(df.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
ggbiplot(df.pca)
library(ggbiplot)
install.packages("ggbiplot")
library(ggbiplot)
library(devtools)
install.packages("devtool")
library(devtools)
install.packages("devtool")
df <- foodwide
install.packages("devtool")
install.packages("ggbiplot")
install.packages("ggplot")
setRepositories()
install.packages("devtool")
install.packages("devtool")
install.packages("ggbiplot")
library(UpSetR)
library(updateR)
install.packages("updateR")
install.packages("updateR")
library(installR)
library(installr)
e^2
exp(2)
exp(1)
exp(4.03)
exp(-2)
expr(-0.4)
exp(-0.4)
exp(4.03)
exp(4.03)/(1+exp(4.03))
exp(4.03-0.0042*30)/(1+exp(4.03-0.0042*30))
exp(-0.0042)
exp(-0.0042)/(1+exp(-0.0042))
exp(-0.0042)
df <- read.csv("C:/Users/duviv/Desktop/df.txt", sep="")
View(df)
df$prev_of_malformation <- df$Number_of_malformations_y / df$Number_of_foetuses_N
summary(df)
library(psycho)
install.packages("psycho")
library(psycho)
library(tidyverse)
df.std <- df %>%
psycho::standardize()
View(df.std)
write.table(df.std, file="df-std")
getwd()
write.table(df.std, file="df-std.txt")
library(readxl)
library(ggplot2)
library(reshape2)µ
library(MASS)
library(splines)
setwd("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized Linear Models/Group work")
library("mgcv")
munich <- read.table("C:/Maxtor_schijf/cursussen/cursus_GLIM/Data/munich_rent.txt", header=T, quote="\"")
munich <- read.table("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized-Linear-Models/Data/Data", header=T)
# read data
setwd("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized-Linear-Models/Data/Data")
munich <- read.table("munich_rent.txt", header=T)
View(munich)
munich$glocation <- as.numeric(I(munich$location ==2))
munich$tlocation <- as.numeric(I(munich$location ==3))
par(mfrow=c(1,2))
par(pty="s")
# parameter bottom, left, top, right
par(mar = c(5,6,4,2)+0.1)
area <- munich$area
rentsqm <- munich$rentsqm
yearc <- munich$yearc
plot(area, rentsqm,
xlab="Area (m^2) ",ylab="Net rent (Euro) per m^2",
cex.lab=1.5,cex.axis=1.3,cex=1.3, col="red")
orderarea <- order(area)
lines(area[orderarea],predict(loess(rentsqm ~ area))[orderarea],
lwd=2,col="blue")
plot(yearc, rentsqm,
xlab="Year construction ",ylab="Net rent (Euro) per m^2",
cex.lab=1.5,cex.axis=1.3,cex=1.3, col="red")
orderyearc <- order(yearc)
lines(yearc[orderyearc],predict(loess(rentsqm ~ yearc))[orderyearc],
lwd=2,col="blue")
munich.gam <- gam(rentsqm~s(area,bs="ps",k=20)+s(yearc,bs="ps",k=20)+
glocation + tlocation, data=munich)
summary(munich.gam)
plot(munich.gam,residuals=FALSE,cex=1.3,col="red",shade=TRUE)
gam.check(munich.gam,col="blue")
?gam.check
setwd("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized Linear Models/Group work")
df <- read_xlsx("IMDb.xlsx")
df <- df[,c("profit", "budget", "director_facebook_likes", "content_rating")]
df$content_rating <- as.factor(df$content_rating)
setwd("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized Linear Models/Group work")
setwd("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized Linear Models/Group-work")
setwd("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized-Linear-Models/Group-work")
df <- read_xlsx("IMDb.xlsx")
df <- df[,c("profit", "budget", "director_facebook_likes", "content_rating")]
df$content_rating <- as.factor(df$content_rating)
# 3. Include the other covariates in the model and determine what variables show an ----
# impact on the profit.
lm.fit <- lm(profit ~ budget + director_facebook_likes + content_rating, data =df)
summary(lm.fit)
# 3. Include the other covariates in the model and determine what variables show an ----
# impact on the profit.
lm.fit <- lm(profit ~ budget + director_facebook_likes, data =df)
summary(lm.fit)
plot(lm.fit)
plot(df$profit, lm.fit$fitted.values)
summary(lm.fit)
View(df)
# 3. Include the other covariates in the model and determine what variables show an ----
# impact on the profit.
lm.fit <- lm(profit ~ budget + director_facebook_likes + content_rating, data =df)
AIC(lm.fit)
# 3. Include the other covariates in the model and determine what variables show an ----
# impact on the profit.
lm.fit <- lm(profit ~ budget + director_facebook_likes, data =df)
AIC(lm.fit)
plot(df$director_facebook_likes, df$profit)
par(mfrow=c(1,1))
plot(df$director_facebook_likes, df$profit)
plot(df$content_rating, df$profit)
plot(df$director_facebook_likes, df$profit)
plot(df$content_rating, df$profit)
plot(df.gam, residuals=FALSE, cex=1.3, col="red", shade=TRUE)
df.gam <- gam(profit~s(budget, bs="ps",k=20)+s(yearc,bs="ps",k=20)+
glocation + tlocation, data=df)
df.gam <- gam(profit~s(budget, bs="ps",k=20)+s(director_facebook_likes,bs="ps",k=20)+
content_rating, data=df)
df.gam <- gam(profit~s(df$budget, bs="ps",k=20)+s(df$director_facebook_likes,bs="ps",k=20)+
df$content_rating, data=df)
library(mgcv)
df.gam <- gam(profit~s(df$budget, bs="ps",k=20)+s(df$director_facebook_likes,bs="ps",k=20)+
df$content_rating, data=df)
AIC(lm.fit)
plot(df$director_facebook_likes, df$profit)
abline(lm(profit~director_facebook_likes, data=df))
df.no.out <- df[-13,]
abline(lm(profit~director_facebook_likes, data=df.no.out), col="red")
summarize(lm(profit~director_facebook_likes, data=df.no.out))
summary(lm(profit~director_facebook_likes, data=df.no.out))
df$director_facebook_likes2 <- df$director_facebook_likes^2
plot(df$profit, df$director_facebook_likes2)
plot(df$director_facebook_likes2, df$profit)
# 3. Include the other covariates in the model and determine what variables show an ----
# impact on the profit.
lm.fit <- lm(profit ~ budget + director_facebook_likes, data =df)
summary(lm.fit)
plot(df$budget, df$profit)
?plot
?cex
??cex
?par$cex
?ifelse
df$profit.bin <- ifelse(df$profit>0, 1, 0)
fit.logit <- glm(profit.bin ~ budget +
director_facebook_likes + content_rating,
family=binomial("logit"), data=df)
summary(fit.logit)
summary(fit.logit)
?gam
# Apply GAM
fit.logit.gam <- gam(profit.bin ~ budget +
director_facebook_likes + content_rating,
family=binomial("logit"), data=df)
# Apply GAM
fit.logit.gam <- gam(profit.bin ~ s(budget, bs="ps", k=20) +
director_facebook_likes + content_rating,
family=binomial("logit"), data=df)
summary(fit.logit.gam)
# Apply GAM
fit.logit.gam <- gam(profit.bin ~ s(df$budget, bs="ps", k=20) +
director_facebook_likes + content_rating,
family=binomial("logit"), data=df)
summary(fit.logit.gam)
ggplot(df, aes(content_rating, profit)) +
geom_point() +
abline(lm(profit~director_facebook_likes, data=df))
