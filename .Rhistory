data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration*director_facebook_likes,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes*duration,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes*budget,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~  director_facebook_likes+ duration*budget,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes,
family = binomial,
data = df)
summary(log.fit.3)
# Compare models
AIC(log.fit.1, logitgam1, logitgam2, logitgam3, logitgam4, logitgam5, logitgam6,
logitgam7, logitgam8)
library(readxl)
library(ggplot2)
library(reshape2)µ
library(MASS)
library(splines)
library(mgcv)
setwd("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized-Linear-Models/Group-work")
df <- read_xlsx("IMDb.xlsx")
df <- df[,c("profit", "budget", "director_facebook_likes", "content_rating", "duration")]
df$content_rating <- as.factor(df$content_rating)
df$profit.bin <- ifelse(df$profit>0, 1, 0)
ggplot(df, aes(budget, profit) ) +
geom_point() +
stat_smooth()
ggplot(df, aes(duration, profit) ) +
geom_point() +
stat_smooth()
ggplot(df, aes(director_facebook_likes, profit) ) +
geom_point() +
stat_smooth()
ggplot(df, aes(content_rating, y=profit) ) +
geom_point() +
stat_summary(fun.y=mean, geom="point", shape=20, size=4, color="red", fill="red")
?stat_smooth
ggplot(df, aes(director_facebook_likes, profit) ) +
geom_point() +
stat_smooth(method="loess")
ggplot(df, aes(director_facebook_likes, profit) ) +
geom_point() +
stat_smooth(method="loess")
ggplot(df, aes(duration, profit) ) +
geom_point() +
stat_smooth(method="loess")
summary(df)
summary(df)
sd(df)
sapply(df, mean, na.rm=TRUE)
sapply(df, sd, na.rm=TRUE)
sapply(df, c(mean, sd), na.rm=TRUE)
sapply(df, mean, na.rm=TRUE)
library(xtable)
xtable(mean, digits(3))
sapply(df, mean, na.rm=TRUE)
sapply(df, mean, na.rm=TRUE)
sapply(df, mean, na.rm=TRUE)
sapply(df, sd, na.rm=TRUE)
summary(df)
summary(df[,c("profit","budget","director_facebook_likes", "duration" )])
sapply(df[,c("profit","budget","director_facebook_likes", "duration" )], sd, na.rm=TRUE)
sd(df$director_facebook_likes)
View(df)
# Tables
table1 <- table(df$content_rating, df$profit)
ftable(table1)
# Tables
table1 <- table(df$content_rating)
ftable(table1)
table1
# Tables
ag <- aggregate(. ~ ID, df, function(x) c(mean = mean(x), sd = sd(x)))
# Tables
ag <- aggregate(. ~ profit, df, function(x) c(mean = mean(x), sd = sd(x)))
ag
# Tables
ag <- aggregate(. ~ content_rating, df, function(x) c(mean = mean(x), sd = sd(x)))
ag
# Tables
ag <- aggregate(profit ~ content_rating, df, function(x) c(mean = mean(x), sd = sd(x)))
ag
summary(df)
library(readxl)
library(ggplot2)
library(reshape2)µ
library(MASS)
library(splines)
library(mgcv)
setwd("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized-Linear-Models/Group-work")
df <- read_xlsx("IMDb.xlsx")
df <- df[,c("profit", "budget", "director_facebook_likes", "content_rating", "duration")]
df$content_rating <- as.factor(df$content_rating)
df$profit.bin <- ifelse(df$profit>0, 1, 0)
# The model
# First we start with simple model, then increase by one variable at a time
# Two different tests are in use: LRT or score test (Rao)
logit.fit <- glm(I(profit>0) ~ budget, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + director_facebook_likes + content_rating + duration, test="LRT")
# The model
# First we start with simple model, then increase by one variable at a time
# Two different tests are in use: LRT or score test (Rao)
logit.fit <- glm(I(profit>0) ~ budget, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + director_facebook_likes + content_rating + duration, test="LRT")
stm_year1 <- read.csv("C:/Users/duviv/Documents/University/KUL/S2/Abandoned/Generalized-Linear-Models/Data/Data/stm_year1.txt")
head(stm_year1)
DMF_1 <- stm_year1$DMF_1
ce <- as.numeric(I (DMF_1[!is.na(DMF_1)] > 0))
gender <- stm_year1$GENDER[!is.na(DMF_1)]
age <- stm_year1$AGE[!is.na(DMF_1)]
xcen <- stm_year1$xcen
ycen <- stm_year1$ycen
xcen.s <- (xcen[!is.na(DMF_1)]-mean(xcen[!is.na(DMF_1)]))/sd(xcen[!is.na(DMF_1)])
ycen.s <- (ycen[!is.na(DMF_1)]-mean(ycen[!is.na(DMF_1)]))/sd(ycen[!is.na(DMF_1)])
summary(ce)
summary(gender)
summary(age)
summary(xcen.s)
summary(ycen.s)
N <- length(gender);N
# Classical logistic regression analysis
matrixce <- matrix(cbind(ce,gender,xcen.s,ycen.s,age),ncol=5)
dimnames(matrixce) <- list(NULL,c("ce","gender","xcen",
"ycen","age"))
caries <- data.frame(matrixce)
head(caries)
# Start modeling
# First we start with simple model, then increase by one variable
# at a time
# Two different tests are in use: LRT or score test (Rao)
carieslogitmodel1 <- glm(ce ~ xcen, family = binomial,
data = caries)
summary(carieslogitmodel1)
add1(carieslogitmodel1,~ . + factor(gender) + ycen +age,test="LRT")
add1(carieslogitmodel1,~ . + factor(gender) + ycen +age,test="Rao")
add1(logit.fit,~ . + director_facebook_likes + content_rating + duration, test="LRT")
# Then we start with fully specified model
# Add or delete variables one by one
log.fit.1 <- glm(I(profit>0) ~ budget +
duration +
director_facebook_likes +
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.2 <- glm(I(profit>0) ~ budget*duration,
family = binomial,
data = df)
summary(log.fit.2)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes,
family = binomial,
data = df)
summary(log.fit.3)
count(df$profit.bin)
summary(df)
table(df$profit.bin)
log.fit.2 <- glm(I(profit>0) ~ budget*duration,
family = binomial,
data = df)
summary(log.fit.2)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration*budget ,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes ,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.1 <- glm(I(profit>0) ~ budget +
I(duration^2) +
director_facebook_likes +
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) =duration
I(duration^2) +
director_facebook_likes +
content_rating,
family = binomial,
data = df)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + duration
I(duration^2) +
director_facebook_likes +
content_rating,
family = binomial,
data = df)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + duration +
I(duration^2) +
director_facebook_likes +
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + duration +
I(duration^2) +
director_facebook_likes + I(director_facebook_likes^2)
content_rating + I(content_rating^2),
family = binomial,
data = df)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + duration +
I(duration^2) +
director_facebook_likes + I(director_facebook_likes^2) +
content_rating + I(content_rating^2),
family = binomial,
data = df)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + duration +
I(duration^2) +
director_facebook_likes + I(director_facebook_likes^2) +
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + I(budget^3) + duration +
I(duration^2) +
director_facebook_likes + I(director_facebook_likes^2) +
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + I(budget^3) +
duration + I(duration^2) + I(duration^3)
director_facebook_likes + I(director_facebook_likes^2) +
content_rating,
family = binomial,
data = df)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + I(budget^3) +
duration + I(duration^2) + I(duration^3) +
director_facebook_likes + I(director_facebook_likes^2) +
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + I(budget^3) +
duration + I(duration^2) + I(duration^3) +
director_facebook_likes + I(director_facebook_likes^2) +
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.1 <- glm(I(profit>0) ~ budget +
duration +
director_facebook_likes +
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
logit.fit <- glm(I(profit>0) ~ budget, data = df, family = binomial)
add1(logit.fit,~ . + director_facebook_likes + content_rating + duration, test="LRT")
logit.fit <- glm(I(profit>0) ~ budget, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + director_facebook_likes + content_rating + duration, test="LRT")
logit.fit <- glm(I(profit>0) ~ duration, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + director_facebook_likes + content_rating + budget, test="LRT")
logit.fit <- glm(I(profit>0) ~ director_facebook_likes, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + budget + content_rating + duration, test="LRT")
# start with content_rating
logit.fit <- glm(I(profit>0) ~ content_rating, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + director_facebook_likes + budget + duration, test="LRT")
# start with budget
logit.fit <- glm(I(profit>0) ~ budget, data = df, family = binomial)
summary(logit.fit)
logit.fit <- glm(I(profit>0) ~ duration, data = df, family = binomial)
summary(logit.fit)
logit.fit <- glm(I(profit>0) ~ director_facebook_likes, data = df, family = binomial)
summary(logit.fit)
logit.fit <- glm(I(profit>0) ~ content_rating, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + director_facebook_likes + content_rating + duration, test="LRT")
add1(logit.fit,~ . + director_facebook_likes + content_rating + budget, test="LRT")
add1(logit.fit,~ . + budget + content_rating + duration, test="LRT")
add1(logit.fit,~ . + director_facebook_likes + budget + duration, test="LRT")
add1(logit.fit,~ . + budget + content_rating + duration, test="LRT")
add1(logit.fit,~ . + director_facebook_likes + content_rating + budget, test="LRT")
add1(logit.fit,~ . + director_facebook_likes + content_rating + budget, test="LRT")
logit.fit1 <- glm(I(profit>0) ~ budget, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + director_facebook_likes + content_rating + duration, test="LRT")
# start with duration
logit.fit2 <- glm(I(profit>0) ~ duration, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + director_facebook_likes + content_rating + budget, test="LRT")
# start with director_facebook_likes
logit.fit3 <- glm(I(profit>0) ~ director_facebook_likes, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + budget + content_rating + duration, test="LRT")
# start with content_rating
logit.fit4 <- glm(I(profit>0) ~ content_rating, data = df, family = binomial)
summary(logit.fit)
add1(logit.fit,~ . + director_facebook_likes + budget + duration, test="LRT")
AIC(logit.fit1, logit.fit2, logit.fit3, logit.fit4)
# Then we start with fully specified model
# Add or delete variables one by one
log.fit.1 <- glm(I(profit>0) ~ budget +
duration +
director_facebook_likes +
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
# start with budget
logit.fit1 <- glm(I(profit>0) ~ budget, data = df, family = binomial)
summary(logit.fit)
# start with budget
logit.fit1 <- glm(I(profit>0) ~ budget, data = df, family = binomial)
summary(logit.fit1)
log.fit.1 <- glm(I(profit>0) ~ budget + I(budget^2) + I(budget^3) +
duration + I(duration^2) + I(duration^3) +
director_facebook_likes + I(director_facebook_likes^2) + I(director_facebook_likes^3)+
content_rating,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.quad.1 <- glm(I(profit>0) ~
budget + I(budget^2) + I(budget^3) +
director_facebook_likes + I(director_facebook_likes^2) + I(director_facebook_likes^3)+
content_rating,
family = binomial,
data = df)
summary(log.fit.quad.1)
log.fit.quad.2 <- glm(I(profit>0) ~
budget + I(budget^2) + I(budget^3),
family = binomial,
data = df)
summary(log.fit.quad.2)
log.fit.quad.2 <- glm(I(profit>0) ~
budget + I(budget^2),
family = binomial,
data = df)
summary(log.fit.quad.2)
log.fit.quad.3 <- glm(I(profit>0) ~
duration + I(duration^2) + I(duration^3)
,
family = binomial,
data = df)
summary(log.fit.quad.3)
log.fit.quad.3 <- glm(I(profit>0) ~
duration + I(duration^2)
,
family = binomial,
data = df)
summary(log.fit.quad.3)
log.fit.quad.4 <- glm(I(profit>0) ~
director_facebook_likes + I(director_facebook_likes^2) + I(director_facebook_likes^3)+
,
family = binomial,
data = df)
log.fit.quad.4 <- glm(I(profit>0) ~
director_facebook_likes + I(director_facebook_likes^2) + I(director_facebook_likes^3)
,
family = binomial,
data = df)
summary(log.fit.quad.4)
log.fit.2 <- glm(I(profit>0) ~ budget*duration,
family = binomial,
data = df)
summary(log.fit.2)
log.fit.3 <- glm(I(profit>0) ~ duration*budget + director_facebook_likes ,
family = binomial,
data = df)
summary(log.fit.3)
# Then we start with fully specified model
# Add or delete variables one by one
log.fit.1 <- glm(I(profit>0) ~ budget*director_facebook_likes
content_rating,
family = binomial,
data = df)
# Then we start with fully specified model
# Add or delete variables one by one
log.fit.1 <- glm(I(profit>0) ~ budget*director_facebook_likes ,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.3 <- glm(I(profit>0) ~ budget*director_facebook_likes,
family = binomial,
data = df)
summary(log.fit.3)
log.fit.4 <- glm(I(profit>0) ~ budget*content_rating,
family = binomial,
data = df)
summary(log.fit.4)
log.fit.5 <- glm(I(profit>0) ~ duration*content_rating,
family = binomial,
data = df)
summary(log.fit.5)
log.fit.7 <- glm(I(profit>0) ~ director_facebook_likes*content_rating,
family = binomial,
data = df)
summary(log.fit.7)
log.fit.2 <- glm(I(profit>0) ~ budget + duration + budget*duration,
family = binomial,
data = df)
summary(log.fit.2)
# Then we start with fully specified model
# Add or delete variables one by one
log.fit.1 <- glm(I(profit>0) ~ director_facebook_likes + duration + budget*director_facebook_likes ,
family = binomial,
data = df)
summary(log.fit.1)
log.fit.2 <- glm(I(profit>0) ~ budget + duration + budget*duration,
family = binomial,
data = df)
summary(log.fit.2)
log.fit.4 <- glm(I(profit>0) ~ budget + content_rating + budget*content_rating,
family = binomial,
data = df)
summary(log.fit.4)
log.fit.5 <- glm(I(profit>0) ~ duration + content_rating + duration*content_rating,
family = binomial,
data = df)
summary(log.fit.5)
log.fit.6 <- glm(I(profit>0) ~ budget + content_rating + budget*content_rating,
family = binomial,
data = df)
summary(log.fit.6)
log.fit.7 <- glm(I(profit>0) ~ director_facebook_likes + content_rating + director_facebook_likes*content_rating,
family = binomial,
data = df)
summary(log.fit.7)
logitgam1 <- gam(I(profit > 0) ~
s(budget, bs="ps", k=30) +
duration +
director_facebook_likes +
content_rating,
data=df, family = binomial)
logitgam2 <- gam(I(profit > 0) ~
budget +
s(duration, bs="ps", k=30) +
director_facebook_likes +
content_rating,
data=df, family = binomial)
logitgam3 <- gam(I(profit > 0) ~
s(budget, bs="ps", k=30) +
s(duration, bs="ps", k=30) +
director_facebook_likes +
content_rating,
data=df, family = binomial)
logitgam4 <- gam(I(profit > 0) ~
s(budget, bs="ps", k=30),
data=df, family = binomial)
logitgam5 <- gam(I(profit > 0) ~
budget,
data=df, family = binomial)
logitgam6 <- gam(I(profit > 0) ~
s(duration, bs="ps", k=30),
data=df, family = binomial)
logitgam7 <- gam(I(profit > 0) ~
duration,
data=df, family = binomial)
logitgam8 <- gam(I(profit > 0) ~
s(budget, bs="ps", k=30) +
duration,
data=df, family = binomial)
# Compare models
AIC(log.fit.1, logitgam1, logitgam2, logitgam3, logitgam4, logitgam5, logitgam6,
logitgam7, logitgam8)
summary(logitgam4)
logitgam1 <- gam(I(profit > 0) ~
s(budget, bs="ps", k=30) +
duration +
director_facebook_likes +
content_rating,
data=df, family = binomial)
summary(logitgam1)
summary(logitgam1)
summary(logitgam2)
summary(logitgam1)
# Compare models
AIC(log.fit.1, logitgam1, logitgam2, logitgam3, logitgam4, logitgam5, logitgam6,
logitgam7, logitgam8)
summary(logitgam4)
summary(logitgam4)
# Compare models
AIC(log.fit.1, logitgam1, logitgam2, logitgam3, logitgam4, logitgam5, logitgam6,
logitgam7, logitgam8)
